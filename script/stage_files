#!/usr/bin/env bash
######################################################
# Stage Billing Files for Pipeline ingestion.
#
# Globals
#   STORAGE_BILLING_DIRECTORY root directory in container for billing data
#   STORAGE_BILLING_ACTUAL_PATH sub folder for actual billing data
#   STORAGE_BILLING_AMORTIZED_PATH sub folder for amortied billing data
#   LOCAL_BILLING_LOOKUP_PATH path to lookup files
#	  STORAGE_ACCOUNT_NAME account for billing data
#	  STORAGE_BACKUP_CONTAINER_NAME container to backup billing files
#	  STORAGE_STAGING_CONTAINER_NAME container to stage manual import
#	  STORAGE_SAS_QUERY_ARG access token to copy from backup to stage
#	  LOCAL_BILLING_TEST_DATA_PATH local path for billing data
#	  AZCOPY_PATH path to azcopy
#
# Params
# --cost_type Cost type files (actual, amortized)
# --month Monthly data to copy (202101, 202311)
# --local Copy files locally if passed. --local.
######################################################
echo starting script

# Stop on errors
set -e

## Globals
PATH_URL="https://%s.blob.core.windows.net/%s/%s/%s%s"
PROJ_ROOT_PATH=$(cd "$(dirname "$0")"/..; pwd)
echo "root folder: $PROJ_ROOT_PATH"

echo "loading env variables"
ENV_VARS="$(awk '!/^\s*#/' "${PROJ_ROOT_PATH}/.env" | awk '!/^\s*$/')"
eval "$(
  printf '%s\n' "$ENV_VARS" | while IFS='' read -r line; do
    key=$(printf '%s\n' "$line"| sed 's/"/\\"/g' | cut -d '=' -f 1)
    value=$(printf '%s\n' "$line" | cut -d '=' -f 2- | sed 's/"/\\\"/g' | tr -d '\f\r')
    printf '%s\n' "export $key=\"$value\""
  done
)"

# Parse params
while [ $# -gt 0 ]; do
    if [[ $1 == *"--"* ]]; then
      param="${1/--/}"
      declare "$param"="$2"
    fi
    shift
done

# set defaults
if [[ -z "$cost_type" ]]; then cost_type="actual"; fi
if [[ -z "$month" ]]; then month="202301"; fi

echo "Copy file for $cost_type $month, local:$local."

if [[ "$cost_type" == "actual" ]]; then
    lookup_file="actual_cost_files"
    billing_path="${STORAGE_BILLING_DIRECTORY}/${STORAGE_BILLING_ACTUAL_PATH}"
fi

if [[ "$cost_type" == "amortized" ]]; then
    lookup_file="amortized_cost_files"
    billing_path="${STORAGE_BILLING_DIRECTORY}/${STORAGE_BILLING_AMORTIZED_PATH}"
fi

lookup_file_path="${PROJ_ROOT_PATH}/${LOCAL_BILLING_LOOKUP_PATH}/${lookup_file}"

printf "Lookup standard file_name in %s\n" "$lookup_file_path"
standard_file_name=$(grep "$month" "$lookup_file_path" | tr -d '\f\r')

if [[ -z "$standard_file_name" ]]; then
    printf 'Standard file not found in %s for %s and %s\n' "${lookup_file_path}" "${cost_type}" "${month}" >&2
    exit 1
fi

# shellcheck disable=SC2059
src_path_url=$(printf "$PATH_URL" "$STORAGE_ACCOUNT_NAME" "$STORAGE_BACKUP_CONTAINER_NAME" "$billing_path" "$standard_file_name" "$STORAGE_SAS_QUERY_ARG")
# shellcheck disable=SC2059
dest_path_url=$(printf "$PATH_URL" "$STORAGE_ACCOUNT_NAME" "$STORAGE_STAGING_CONTAINER_NAME" "$billing_path" "$standard_file_name" "$STORAGE_SAS_QUERY_ARG")

if [[ -v local ]]; then
    echo "Setting file version for ${standard_file_name}"
    versioned_name="v$(date +%Y%m%dT%H%M%S).${standard_file_name##*.}"
    dest_path_url="$PROJ_ROOT_PATH/$LOCAL_BILLING_TEST_DATA_PATH/${standard_file_name}.$versioned_name"
fi

echo "Copying file from $src_path_url to $dest_path_url"
azcopy_full_path="${PROJ_ROOT_PATH}/${AZCOPY_PATH}/azcopy"

AZCOPY_CONCURRENCY_VALUE='AUTO'
"$azcopy_full_path" copy "$src_path_url" "$dest_path_url" --overwrite=prompt --s2s-preserve-access-tier=false --include-directory-stub=false --recursive --log-level=INFO;
# shellcheck disable=SC2034
AZCOPY_CONCURRENCY_VALUE=''
